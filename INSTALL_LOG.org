* Steps to install, configure, and demonstrate Marimo
:PROPERTIES:
:header-args: :cmdline "2>&1" :wrap example :results verbatim
:ID:       0E1B153D-808F-455D-8A7E-9EA30C9C8783
:END:

- I want to do everything using uv, with the "modern" approach
- This is unlike the examples given in the marimo documentation, which use uv but in the legacy pip-compatible mode
** DONE Initial setup
CLOSED: [2025-02-08 Sat 18:49]
:LOGBOOK:
- State "DONE"       from "TODO"       [2025-02-08 Sat 18:49] \\
  So far, so good
:END:
First I check that uv is up to date
#+begin_src fish
  uv self update
#+end_src

#+RESULTS:

#+begin_example
  info: Checking for updates...
  success: Upgraded uv from v0.5.13 to v0.5.29! https://github.com/astral-sh/uv/releases/tag/0.5.29
#+end_example

Then initialize a project in the current directory

#+begin_src fish
  uv init
#+end_src

#+RESULTS:

#+begin_example
  Initialized project `dawgi-marimo-talk`
#+end_example


#+begin_src fish :results verbatim
  ls
#+end_src

#+RESULTS:

#+begin_example
  INSTALL_LOG.org
  LICENSE
  README.md
  hello.py
  pyproject.toml
  uv.lock
#+end_example

Test that the python script can run

#+begin_src fish
  uv run hello.py
#+end_src

#+RESULTS:

#+begin_example
  Hello from dawgi-marimo-talk!
#+end_example
** DONE Make sure marimo is installed
CLOSED: [2025-02-08 Sat 22:04]
I was wondering which of two approaches to use:
1. Add all dependencies to the whole project (in pyproject.toml)
2. Add the dependencies to a the notebook or script that needs them (in header of file a la PEP 722)


First I will try the whole project approach. (Note that I had to use the :cmdline header argument to merge stderr and sdout in the source block outputs - see PROPERTIES block in the [[id:0E1B153D-808F-455D-8A7E-9EA30C9C8783][top-level header]])

#+begin_src fish
  uv add "marimo[recommended]"
#+end_src

#+RESULTS:
#+begin_example
Resolved 71 packages in 827ms
warning: The package `marimo==0.11.0` does not have an extra named `extras`
Downloading polars (27.8MiB)
Downloading pyarrow (29.2MiB)
Downloading pydantic-core (1.7MiB)
Downloading duckdb (14.5MiB)
 Downloaded pydantic-core
 Downloaded duckdb
 Downloaded polars
 Downloaded pyarrow
Prepared 28 packages in 3.00s
Installed 28 packages in 20ms
 + altair==5.5.0
 + annotated-types==0.7.0
 + attrs==25.1.0
 + certifi==2025.1.31
 + distro==1.9.0
 + duckdb==1.2.0
 + fastjsonschema==2.21.1
 + httpcore==1.0.7
 + httpx==0.28.1
 + jinja2==3.1.5
 + jiter==0.8.2
 + jsonschema==4.23.0
 + jsonschema-specifications==2024.10.1
 + jupyter-core==5.7.2
 + markupsafe==3.0.2
 + nbformat==5.10.4
 + openai==1.61.1
 + platformdirs==4.3.6
 + polars==1.22.0
 + pyarrow==19.0.0
 + pydantic==2.10.6
 + pydantic-core==2.27.2
 + referencing==0.36.2
 + rpds-py==0.22.3
 + sqlglot==26.4.1
 + tqdm==4.67.1
 + traitlets==5.14.3
 + typing-extensions==4.12.2
#+end_example

#+begin_example
  Resolved 25 packages in 1.43s
  Downloading jedi (1.5MiB)
  Downloading pygments (1.2MiB)
  Downloading marimo (10.4MiB)
  Downloading ruff (10.6MiB)
  Downloading pycrdt (1.6MiB)
   Downloaded pygments
   Downloaded pycrdt
   Downloaded jedi
   Downloaded ruff
   Downloaded marimo
  Prepared 23 packages in 1.69s
  Installed 23 packages in 35ms
   + anyio==4.8.0
   + click==8.1.8
   + docutils==0.21.2
   + h11==0.14.0
   + idna==3.10
   + itsdangerous==2.2.0
   + jedi==0.19.2
   + marimo==0.11.0
   + markdown==3.7
   + narwhals==1.25.2
   + packaging==24.2
   + parso==0.8.4
   + psutil==6.1.1
   + pycrdt==0.11.1
   + pygments==2.19.1
   + pymdown-extensions==10.14.3
   + pyyaml==6.0.2
   + ruff==0.9.5
   + sniffio==1.3.1
   + starlette==0.45.3
   + tomlkit==0.13.2
   + uvicorn==0.34.0
   + websockets==14.2
  [ Babel evaluation exited with code 0 ]
#+end_example

We also add astropy since we are sure to need it

#+begin_src fish :results verbatim
  uv add astropy 
#+end_src

#+RESULTS:

#+begin_example
Resolved 29 packages in 193ms
Installed 4 packages in 39ms
 + astropy==7.0.1
 + astropy-iers-data==0.2025.2.3.0.32.42
 + numpy==2.2.2
 + pyerfa==2.0.1.5
#+end_example

#+begin_src sh
  uv add matplotlib seaborn 
#+end_src

#+RESULTS:
#+begin_example
Resolved 42 packages in 1.09s
Downloading fonttools (2.6MiB)
Downloading pillow (3.0MiB)
Downloading pandas (10.8MiB)
Downloading matplotlib (7.7MiB)
 Downloaded fonttools
 Downloaded pillow
 Downloaded matplotlib
 Downloaded pandas
Prepared 13 packages in 1.64s
Installed 13 packages in 52ms
 + contourpy==1.3.1
 + cycler==0.12.1
 + fonttools==4.56.0
 + kiwisolver==1.4.8
 + matplotlib==3.10.0
 + pandas==2.2.3
 + pillow==11.1.0
 + pyparsing==3.2.1
 + python-dateutil==2.9.0.post0
 + pytz==2025.1
 + seaborn==0.13.2
 + six==1.17.0
 + tzdata==2025.1
#+end_example

** TODO Running marimo
- Again we have two different ways of proceeding here:
  1. We could just use ~uv run~ before everything. This will automatically make sure that the venv is up to date and then use it under the hood
  2. Or we can use ~uv sync~ to get everything up to date, then activate the venv ourselves with ~source .venv/bin/activate.fish~. That way, we can just type ~marimo~ instead of ~uv run marimo~.
- To be honest, I think the first method is better, even though it is more typing.
  - That is what we will use in this org file.
  - But for the demo it might be better to activate the venv since that may be less confusing for people.


#+begin_src sh
  uv run marimo --help
#+end_src

#+RESULTS:
#+begin_example
Usage: marimo [OPTIONS] COMMAND [ARGS]...

  Welcome to marimo!
  
  Getting started:

    ,* marimo tutorial intro  
  

  Example usage:

    ,* marimo edit:              create or edit notebooks
  
    ,* marimo edit notebook.py:  create or edit a notebook called notebook.py
  
    ,* marimo run notebook.py:   run a notebook as a read-only app
  
    ,* marimo tutorial --help:   list tutorials

Options:
  --version                       Show the version and exit.
  -l, --log-level [DEBUG|INFO|WARN|ERROR|CRITICAL]
                                  Choose logging level.  [default: WARN]
  -q, --quiet                     Suppress standard out.
  -y, --yes                       Automatic yes to prompts, running non-
                                  interactively.
  -d, --development-mode          Run in development mode; enables debug logs
                                  and server autoreload.
  --help                          Show this message and exit.

Commands:
  config            Various commands for the marimo config.
  convert           Convert a Jupyter notebook or Markdown file to a...
  edit              Create or edit notebooks.
  env               Print out environment information for debugging...
  export            Export a notebook to various formats.
  new               Create a new notebook.
  recover           Recover a marimo notebook from JSON.
  run               Run a notebook as an app in read-only mode.
  shell-completion  Install shell completions for marimo.
  tutorial          Open a tutorial.
#+end_example


#+begin_src sh :eval no
  uv run marimo edit dawgi-marimo.py
#+end_src
